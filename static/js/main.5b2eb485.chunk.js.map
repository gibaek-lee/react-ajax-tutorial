{"version":3,"sources":["components/Header/Header.js","components/PostWrapper/PostWrapper.js","components/Navigate/Navigate.js","components/Post/Post.js","components/CommentList/CommentList.js","components/Comment/Comment.js","components/Warning/Warning.js","services/post.js","containers/PostContainer/PostContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","PostWrapper","_ref","children","Navigate","postId","disabled","onClick","Button","color","content","icon","labelPosition","Post","title","body","comments","components_CommentList_CommentList","CommentList","mapComments","map","comment","index","components_Comment_Comment","name","email","split","key","Comment","Warning","styles","warning","style","getPost","axios","get","getComments","concat","PostContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchPostInfo","asyncToGenerator","regenerator_default","mark","_callee","info","_info$0$data","wrap","_context","prev","next","setState","fetching","Promise","all","service","sent","console","log","data","post","t0","warningAni","stop","_x","apply","arguments","id","setInterval","state","opacity","clearInterval","handleNavigateClick","direction","_this$state","components_PostWrapper_PostWrapper","components_Navigate_Navigate","components_Post_Post","components_Warning_Warning","Component","App","components_Header_Header","containers_PostContainer_PostContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b2eb485.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n  <div className=\"Header\">\r\n    POSTS\r\n  </div>\r\n)\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './PostWrapper.css';\r\n\r\nconst PostWrapper = ({ children }) => (//여러 하위 components를 감싸주어서 하나의 css로 관리하는 역할\r\n  <div className=\"PostWrapper\">\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default PostWrapper;\r\n","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport './Navigate.css';\r\n\r\nconst Navigate = ({ postId, disabled, onClick }) => (\r\n  <div className=\"Navigate\">\r\n    <Button\r\n      color=\"teal\"\r\n      content=\"Prev\"\r\n      icon=\"left arrow\"\r\n      labelPosition=\"left\"\r\n      onClick={()=>onClick(\"Prev\")}\r\n      disabled={disabled}\r\n    />\r\n    <div className=\"Navigate-page-num\">\r\n      {postId}\r\n    </div>\r\n    <Button\r\n      color=\"teal\"\r\n      content=\"Next\"\r\n      icon=\"right arrow\"\r\n      labelPosition=\"right\"\r\n      className=\"Navigate-right-button\"\r\n      onClick={()=>onClick(\"Next\")}\r\n      disabled={disabled}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default Navigate\r\n","import React from 'react';\r\nimport './Post.css';\r\nimport { CommentList } from '../';\r\n\r\nconst Post = ({title, body, comments}) => (\r\n  <div className=\"Post\">\r\n    <h1>{title}</h1>\r\n    <p>\r\n      {body}\r\n    </p>\r\n    <CommentList comments={comments}/>\r\n  </div>\r\n)\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport './CommentList.css';\r\nimport { Comment } from '../';\r\n\r\nconst CommentList = ({comments}) => {\r\n  const mapComments = comments.map(\r\n    (comment, index) => (\r\n      <Comment\r\n        name={comment.email.split('@')[0]}\r\n        body={comment.body}\r\n        key={index}\r\n      />\r\n    )\r\n  );\r\n\r\n  return (\r\n    <ul className=\"CommentList\">\r\n      {mapComments}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst Comment = ({name, body, index}) => (\r\n  <li className=\"Comment\">\r\n    <p>\r\n      <b>{name}</b> {body}\r\n    </p>\r\n  </li>\r\n)\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport './Warning.css';\r\n\r\nconst Warning = ({styles, warning}) => {\r\n  if(!warning) return null;\r\n  return (\r\n    <div className=\"Warning\" style={styles}>\r\n      Prev post does not exist\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Warning;\r\n","import axios from 'axios';//document: https://github.com/axios/axios\r\n\r\nexport function getPost(postId) {\r\n  return axios.get('https://jsonplaceholder.typicode.com/posts/' + postId);\r\n}\r\n\r\nexport function getComments(postId) {\r\n  return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`);\r\n}\r\n","import React, { Component } from 'react';\r\nimport { PostWrapper, Navigate, Post, Warning } from '../../components';\r\nimport * as service from '../../services/post';\r\n\r\nclass PostContainer extends Component {\r\n  constructor(props) {//LifeCycleAPI for initialize state\r\n    super();\r\n    this.state = {//component 호출됐을 때 state 초기화\r\n      postId: 1,\r\n      fetching: false,//knowing request waiting request or complete. true: requesting, false: complete\r\n      warning: false,\r\n      post: {\r\n        title: null,\r\n        body: null\r\n      },\r\n      comments: [],\r\n      styles: {\r\n        opacity: 0,\r\n      }\r\n    };\r\n  }\r\n  componentDidMount() {//LifeCycleAPI for ajax request\r\n    this.fetchPostInfo(1);\r\n  }\r\n\r\n  fetchPostInfo = async (postId) => {//async-await ajax call via axios\r\n    this.setState({\r\n      fetching: true //requsting\r\n    });\r\n\r\n    try {\r\n      //wait for two promises\r\n      const info = await Promise.all([//여러개의 post를 한번에 전달할 때 Promise.all을 사용한다.\r\n        service.getPost(postId),\r\n        service.getComments(postId)\r\n      ]);\r\n      console.log(info);\r\n      /* post 순서대로 하나씩 전달할 때\r\n      //async-await: 비동기 작업을 동기작업 하듯이 코드 작성(callback이나 promise 사용되지 않음)\r\n      const post = await service.getPost(postId);//await: Promise를 기다려주는 역할\r\n      console.log(post);\r\n      const comments = await service.getComments(postId);\r\n      console.log(comments);\r\n      */\r\n\r\n      const { title, body } = info[0].data;\r\n      const comments = info[1].data;\r\n\r\n      this.setState({\r\n        post: {\r\n          title,\r\n          body\r\n        },\r\n        comments,\r\n        fetching: false, //done\r\n        warning: false,\r\n        postId\r\n      });\r\n\r\n    } catch(e) {\r\n      this.setState({\r\n        fetching: false,\r\n        warning: true\r\n      });\r\n      console.log('error occured', e);\r\n      this.warningAni();\r\n    }\r\n  }\r\n\r\n  warningAni = () => {\r\n    const frame = () => {\r\n      console.log(\"warninng ani running\");\r\n      this.setState((state) => {\r\n        if(state.styles.opacity > 0.8) {\r\n          clearInterval(id);\r\n          return {styles: {opacity: 0}}\r\n        }\r\n        return {styles: {opacity: state.styles.opacity + 0.01}}\r\n      })\r\n    }\r\n    var id = setInterval(frame, 15);\r\n  }\r\n\r\n  handleNavigateClick = (direction) => {\r\n    const postId = this.state.postId;\r\n    if(direction === \"Prev\") this.fetchPostInfo(postId-1);\r\n    if(direction === \"Next\") this.fetchPostInfo(postId+1);\r\n  }\r\n\r\n  render() {\r\n    const { postId, fetching, post, comments, styles, warning } = this.state;\r\n    return (\r\n      <PostWrapper>\r\n        <Navigate\r\n          postId={postId}\r\n          disabled={fetching}\r\n          onClick={this.handleNavigateClick}\r\n        />\r\n        <Post\r\n          title={post.title}\r\n          body={post.body}\r\n          comments={comments}\r\n        />\r\n        <Warning\r\n          styles={styles}\r\n          warning={warning}\r\n        />\r\n      </PostWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostContainer;\r\n","import React, { Component } from 'react';\nimport { Header } from './components';\nimport { PostContainer } from './containers';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header/>\n        <PostContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Header/Header.js","components/PostWrapper/PostWrapper.js","components/Navigate/Navigate.js","components/Post/Post.js","components/CommentList/CommentList.js","components/Comment/Comment.js","components/Warning/Warning.js","services/post.js","containers/PostContainer/PostContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","PostWrapper","_ref","children","Navigate","postId","disabled","onClick","Button","color","content","icon","labelPosition","Post","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","body","comments","navDirection","didComponentOut","nextProps","_this2","console","log","setTimeout","setState","_this$state","animation","concat","components_CommentList_CommentList","Component","CommentList","mapComments","map","comment","index","components_Comment_Comment","name","email","split","key","Comment","Warning","styles","warning","style","getPost","axios","get","getComments","PostContainer","fetchPostInfo","asyncToGenerator","regenerator_default","mark","_callee","info","_info$0$data","wrap","_context","prev","next","fetching","Promise","all","service","sent","data","post","t0","warningAni","stop","_x","apply","arguments","id","setInterval","opacity","clearInterval","handleNavigateClick","direction","components_PostWrapper_PostWrapper","components_Navigate_Navigate","components_Post_Post","components_Warning_Warning","App","components_Header_Header","containers_PostContainer_PostContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f03dfbe0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n  <div className=\"Header\">\r\n    POSTS\r\n  </div>\r\n)\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './PostWrapper.css';\r\n\r\nconst PostWrapper = ({ children }) => (//여러 하위 components를 감싸주어서 하나의 css로 관리하는 역할\r\n  <div className=\"PostWrapper\">\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default PostWrapper;\r\n","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport './Navigate.css';\r\n\r\nconst Navigate = ({ postId, disabled, onClick }) => (\r\n  <div className=\"Navigate\">\r\n    <Button\r\n      color=\"teal\"\r\n      content=\"Prev\"\r\n      icon=\"left arrow\"\r\n      labelPosition=\"left\"\r\n      onClick={()=>onClick(\"Prev\")}\r\n      disabled={disabled}\r\n    />\r\n    <div className=\"Navigate-page-num\">\r\n      {postId}\r\n    </div>\r\n    <Button\r\n      color=\"teal\"\r\n      content=\"Next\"\r\n      icon=\"right arrow\"\r\n      labelPosition=\"right\"\r\n      className=\"Navigate-right-button\"\r\n      onClick={()=>onClick(\"Next\")}\r\n      disabled={disabled}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default Navigate\r\n","import React, { Component } from 'react';\r\nimport './Post.css';\r\nimport { CommentList } from '../';\r\n\r\nclass Post extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      postId: 0,\r\n      title: '',\r\n      body: '',\r\n      comments: [],\r\n      navDirection: '',\r\n      didComponentOut: false\r\n    }\r\n  }\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    if( (nextProps.postId !== this.props.postId) && this.state.didComponentOut ) {\r\n      console.log('UNSAFE_different');\r\n      const navDirection = (this.props.postId <= nextProps.postId) ? 'right' : 'left';\r\n\r\n      console.log(\"SetTimeout running\");\r\n      setTimeout( () => {\r\n        console.log(\"SetTimeout finished\");\r\n        const { postId, title, body, comments } = nextProps;\r\n        this.setState({\r\n          postId,\r\n          title,\r\n          body,\r\n          comments,\r\n          didComponentOut: false//animation stop trigger\r\n        });\r\n        /* 이전 state의 내용이 담긴 Post의 Out Animation이 적당히 진행되기를 기다린 후\r\n        새로운 props를 state로 담아서 Post rendering 시키고 In Animation을 동작시키기 위한\r\n        싱크 맞추기: animation 1000ms <=> setTimeout 300ms */\r\n      }, 300);\r\n\r\n      this.setState({\r\n        navDirection\r\n      })\r\n      return;\r\n    }\r\n\r\n    if(!this.props.postId) {//아직 fetching이 일어나기 전에 Post가 먼저 rendering 되므로 첫 Post가 보이기 위한 경계조건\r\n      console.log('UNSAFE_nothing different_firstRender');\r\n      const { postId, title, body, comments } = nextProps;\r\n      this.setState({\r\n        postId,\r\n        title,\r\n        body,\r\n        comments\r\n      });\r\n    } else {//첫 경계조건 이후 animation start trigger\r\n      console.log('UNSAFE_nothing different_afterFirstRender');\r\n      this.setState({\r\n        didComponentOut: true\r\n      });\r\n    }\r\n  }\r\n  shouldComponentUpdate(nextProps) {\r\n    console.log('shouldComoponentUpdate');\r\n    /*navDirection이 right/left 변환될 때 setState({didComponentOut: true})으로 인해\r\n    한 차례 이전 Animation이 rendering되는 것을 막기 위한 조건이다.*/\r\n    if((nextProps.postId === this.props.postId) && !this.state.didComponentOut) return false;\r\n    //첫 페이지 이전으로 가려고 할 때 한번의 leftout 애니메이션이 발생하는것을 막기위한 경계조건\r\n    if(nextProps.postId === 1 && this.props.postId === 1 && this.state.postId === 1) return false;\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const { title, body, comments, navDirection, didComponentOut } = this.state;\r\n    let animation = '';\r\n    if(navDirection) {\r\n      animation = didComponentOut\r\n                ? ( (navDirection === 'right') ? 'rightOut' : 'leftOut' )\r\n                : ( (navDirection === 'right') ? 'rightIn' : 'leftIn' );\r\n    }\r\n    console.log(`render(): ${animation}`);\r\n\r\n    return (\r\n      <div className = {`Post ${animation}`}>\r\n        <h1>{title}</h1>\r\n        <p>\r\n          {body}\r\n        </p>\r\n        <CommentList comments={comments}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport './CommentList.css';\r\nimport { Comment } from '../';\r\n\r\nconst CommentList = ({comments}) => {\r\n  const mapComments = comments.map(\r\n    (comment, index) => (\r\n      <Comment\r\n        name={comment.email.split('@')[0]}\r\n        body={comment.body}\r\n        key={index}\r\n      />\r\n    )\r\n  );\r\n\r\n  return (\r\n    <ul className=\"CommentList\">\r\n      {mapComments}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst Comment = ({name, body, index}) => (\r\n  <li className=\"Comment\">\r\n    <p>\r\n      <b>{name}</b> {body}\r\n    </p>\r\n  </li>\r\n)\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport './Warning.css';\r\n\r\nconst Warning = ({styles, warning}) => {\r\n  if(!warning) return null;\r\n  return (\r\n    <div className=\"Warning\" style={styles}>\r\n      Prev post does not exist\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Warning;\r\n","import axios from 'axios';//document: https://github.com/axios/axios\r\n\r\nexport function getPost(postId) {\r\n  return axios.get('https://jsonplaceholder.typicode.com/posts/' + postId);\r\n}\r\n\r\nexport function getComments(postId) {\r\n  return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}/comments`);\r\n}\r\n","import React, { Component } from 'react';\r\nimport { PostWrapper, Navigate, Post, Warning } from '../../components';\r\nimport * as service from '../../services/post';\r\n\r\nclass PostContainer extends Component {\r\n  constructor(props) {//LifeCycleAPI for initialize state\r\n    super();\r\n    this.state = {//component 호출됐을 때 state 초기화\r\n      postId: 0,\r\n      fetching: false,//knowing request waiting request or complete. true: requesting, false: complete\r\n      warning: false,\r\n      post: {\r\n        title: null,\r\n        body: null\r\n      },\r\n      comments: [],\r\n      styles: {\r\n        opacity: 0,\r\n      }\r\n    };\r\n  }\r\n  componentDidMount() {//LifeCycleAPI for ajax request\r\n    this.fetchPostInfo(1);\r\n  }\r\n\r\n  fetchPostInfo = async (postId) => {//async-await ajax call via axios\r\n    this.setState({\r\n      fetching: true //requsting\r\n    });\r\n\r\n    try {\r\n      //wait for two promises\r\n      const info = await Promise.all([//여러개의 post를 한번에 전달할 때 Promise.all을 사용한다.\r\n        service.getPost(postId),\r\n        service.getComments(postId)\r\n      ]);\r\n      console.log(info);\r\n      /* post 순서대로 하나씩 전달할 때\r\n      //async-await: 비동기 작업을 동기작업 하듯이 코드 작성(callback이나 promise 사용되지 않음)\r\n      const post = await service.getPost(postId);//await: Promise를 기다려주는 역할\r\n      console.log(post);\r\n      const comments = await service.getComments(postId);\r\n      console.log(comments);\r\n      */\r\n\r\n      const { title, body } = info[0].data;\r\n      const comments = info[1].data;\r\n\r\n      this.setState({\r\n        post: {\r\n          title,\r\n          body\r\n        },\r\n        comments,\r\n        fetching: false, //done\r\n        warning: false,\r\n        postId\r\n      });\r\n\r\n    } catch(e) {\r\n      this.setState({\r\n        fetching: false,\r\n        warning: true\r\n      });\r\n      console.log('error occured', e);\r\n      this.warningAni();\r\n    }\r\n  }\r\n\r\n  warningAni = () => {\r\n    const frame = () => {\r\n      this.setState((state) => {\r\n        if(state.styles.opacity > 0.8) {\r\n          clearInterval(id);\r\n          return {styles: {opacity: 0}}\r\n        }\r\n        return {styles: {opacity: state.styles.opacity + 0.02}}\r\n      })\r\n    }\r\n    var id = setInterval(frame, 15);\r\n  }\r\n\r\n  handleNavigateClick = (direction) => {\r\n    const postId = this.state.postId;\r\n    if(direction === \"Prev\") this.fetchPostInfo(postId-1);\r\n    if(direction === \"Next\") this.fetchPostInfo(postId+1);\r\n  }\r\n  \r\n  render() {\r\n    const { postId, fetching, post, comments, styles, warning } = this.state;\r\n    const disabled = (fetching)\r\n                  ? true : false;\r\n    return (\r\n      <PostWrapper>\r\n        <Navigate\r\n          postId={postId}\r\n          disabled={disabled}\r\n          onClick={this.handleNavigateClick}\r\n        />\r\n        <Post\r\n          postId={postId}\r\n          title={post.title}\r\n          body={post.body}\r\n          comments={comments}\r\n        />\r\n        <Warning\r\n          styles={styles}\r\n          warning={warning}\r\n        />\r\n      </PostWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostContainer;\r\n","import React, { Component } from 'react';\r\nimport { Header } from './components';\r\nimport { PostContainer } from './containers';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        <PostContainer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}